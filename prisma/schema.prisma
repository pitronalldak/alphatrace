generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model channels {
  id               String   @id(map: "pk_channels") @db.Uuid
  url              String   @unique(map: "ix_channels_url") @db.VarChar(255)
  channel_id       String   @unique(map: "ix_channels_channel_id") @db.VarChar(64)
  description      String?  @db.VarChar
  title            String?  @db.VarChar(255)
  media_type       String   @db.VarChar(255)
  subscribers      Int
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  posts_cnt        Int?
  video_categories Json?    @db.Json
  logo_url         String?  @db.VarChar(512)
  twitter          String?  @db.VarChar(512)
  instagram        String?  @db.VarChar(512)
  facebook         String?  @db.VarChar(512)
  posts            posts[]
}

model companies {
  id          String   @id(map: "pk_companies") @db.Uuid
  ticker      String   @unique(map: "ix_companies_ticker") @db.VarChar(32)
  name        String?  @db.VarChar(255)
  exchange    String?  @db.VarChar(128)
  sector      String?  @db.VarChar(128)
  industry    String?  @db.VarChar(128)
  country     String?  @db.VarChar(128)
  website     String?  @db.VarChar(255)
  market_cap  BigInt?
  employees   Int?
  description String?  @db.VarChar
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model cryptocurrencies {
  id                 String   @id(map: "pk_cryptocurrencies") @db.Uuid
  coingecko_id       String   @unique(map: "ix_cryptocurrencies_coingecko_id") @db.VarChar(128)
  symbol             String?  @db.VarChar(64)
  name               String?  @db.VarChar(255)
  market_cap         BigInt?
  market_cap_rank    Int?
  current_price      Decimal? @db.Decimal(20, 8)
  total_volume       BigInt?
  circulating_supply Decimal? @db.Decimal(24, 8)
  total_supply       Decimal? @db.Decimal(24, 8)
  max_supply         Decimal? @db.Decimal(24, 8)
  image_url          String?  @db.VarChar(512)
  created_at         DateTime @db.Timestamp(6)
  updated_at         DateTime @db.Timestamp(6)

  @@index([symbol], map: "ix_cryptocurrencies_symbol")
}

model mentions {
  id             String   @id(map: "pk_mentions") @db.Uuid
  post_id        String   @db.Uuid
  entity_type    String   @db.VarChar(16)
  entity_id      String?  @db.Uuid
  match_score    Int
  matched_fields String?  @db.VarChar(255)
  created_at     DateTime @db.Timestamp(6)
  updated_at     DateTime @db.Timestamp(6)
  start          Float
  end            Float

  @@unique([post_id, entity_id, start, end], map: "uniq_post_entity_start_end")
}

model posts {
  id               String        @id(map: "pk_posts") @db.Uuid
  channel_id       String        @db.Uuid
  url              String        @unique(map: "ix_posts_url") @db.VarChar(255)
  description      String?       @db.VarChar
  title            String?       @db.VarChar
  created_at       DateTime      @db.Timestamp(6)
  updated_at       DateTime      @db.Timestamp(6)
  views            Int
  likes            Int
  comments         Int
  shares           Int
  published_at     DateTime      @db.Timestamp(6)
  post_id          String        @unique(map: "ix_posts_post_id") @db.VarChar(255)
  s3_audio_url     String?       @db.VarChar
  duration_seconds Int?
  logo_url         String?       @db.VarChar(512)
  channels         channels      @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_posts_channel_id_channels")
  transcripts      transcripts[]
}

model transcripts {
  id         String   @id(map: "pk_transcripts") @db.Uuid
  post_id    String   @db.Uuid
  text       Json     @db.Json
  duration   Float
  language   String   @db.VarChar(255)
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transcripts_post_id_posts")
}

model users {
  id         Int      @id(map: "pk_users") @default(autoincrement())
  email      String   @unique(map: "ix_users_email") @db.VarChar(255)
  full_name  String?  @db.VarChar(255)
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}
